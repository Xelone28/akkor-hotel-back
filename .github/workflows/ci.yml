name: Build, Test, and Publish to GitHub Packages

on:
  push:
    branches: [main]
    tags:
      - "v*"

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: mydatabase
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      minio:
        image: lazybit/minio
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: --name=minio --health-cmd "curl http://localhost:9000/minio/health/live"   

    steps:
      - run: wget https://dl.min.io/client/mc/release/linux-amd64/mc
      - run: chmod +x ./mc
      - run: ./mc alias set minio http://127.0.0.1:9000 accesskey password
      - run: ./mc mb --ignore-existing minio/mybucket
      
      - name: Checkout the code
        uses: actions/checkout@v4
      
      - name: Set up Python  
        uses: actions/setup-python@v4  
        with:
          python-version: "3.12"

      - name: Install Poetry  
        run: |
          pip install poetry
          poetry config virtualenvs.create false

      - name: Install dependencies  
        run: poetry install --no-root

      - name: Wait for database & MinIO  
        run: sleep 10

      - name: Run Tests  
        env:
          DATABASE_URL: "postgresql+asyncpg://myuser:mypassword@localhost:5432/mydatabase"
          S3_ENDPOINT: "http://localhost:9000"
          S3_ACCESS_KEY: "minioadmin"
          S3_SECRET_KEY: "minioadmin"
          S3_BUCKET: "testbucket"
        run: pytest -v

  build-and-publish:
    runs-on: ubuntu-latest
    needs: test

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and tag Docker image
        run: |
          TAG=$(echo ${GITHUB_REF#refs/tags/}) # Extract tag from 'refs/tags/vX.X.X' 
          IMAGE=ghcr.io/${{ github.repository }}
          docker build --build-arg VERSION="$TAG" -t $IMAGE:$TAG .
          docker tag $IMAGE:$TAG $IMAGE:latest

      - name: Push Docker image with version tag
        run: |
          TAG=$(echo ${GITHUB_REF#refs/tags/})  
          IMAGE=ghcr.io/${{ github.repository }}
          docker push $IMAGE:$TAG

      - name: Push Docker image with 'latest' tag
        run: |
          IMAGE=ghcr.io/${{ github.repository }}
          docker push $IMAGE:latest
